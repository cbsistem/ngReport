// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var Page, PaperSize, PreparedPage, base,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  base = require('./base');

  PaperSize = require('./report').PaperSize;

  Page = (function(superClass) {
    extend(Page, superClass);

    function Page(parent) {
      Page.__super__.constructor.call(this, parent);
      this.report = parent;
      this.marginBottom = 0;
      this.marginLeft = 0;
      this.marginTop = 0;
      this.marginRight = 0;
      this.landscape = false;
      this.width = PaperSize.A4.x;
      this.height = PaperSize.A4.y;
      this._staticBands = null;
      this._dataBands = null;
    }

    Page.prototype._build = function(document) {
      return new PreparedPage(document, this);
    };

    Page.prototype.clearCache = function() {
      var child, i, len, ref, results;
      Page.__super__.clearCache.call(this);
      ref = this.children;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        if (child.clearCache) {
          results.push(child.clearCache());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Page.prototype.newPage = function(document, node) {
      var band, i, j, k, len, len1, len2, page, ref, ref1, ref2, results;
      if (!this._staticBands) {
        this._staticBands = [];
        this._dataBands = [];
        ref = this.children;
        for (i = 0, len = ref.length; i < len; i++) {
          band = ref[i];
          if (band._staticBand) {
            this._staticBands.push(band);
          } else {
            this._dataBands.push(band);
          }
        }
      }
      page = this._build(document);
      document.addPage(page);
      this._page = page;
      ref1 = this._staticBands;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        band = ref1[j];
        band.render(page);
      }
      if (node) {
        return page;
      } else {
        ref2 = this._dataBands;
        results = [];
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          band = ref2[k];
          if (!band._childBand) {
            results.push(band.render(page));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    Page.prototype.render = function(document) {
      return this.newPage(document);
    };

    return Page;

  })(base.BaseObject);

  module.exports = Page;

  PreparedPage = require('./engine').PreparedPage;

}).call(this);

//# sourceMappingURL=page.js.map
