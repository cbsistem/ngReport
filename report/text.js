// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var Runtime, TextObject, base,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  base = require('./base');

  Runtime = require('./runtime');

  TextObject = (function(superClass) {
    extend(TextObject, superClass);

    TextObject.getClassName = function() {
      return 'Text';
    };

    function TextObject(parent) {
      TextObject.__super__.constructor.call(this, parent);
      this.allowExpressions = true;
      this.autoWidth = false;
      this.canGrow = false;
      this.highlight = '';
      this.highlightStyle = {};
      this.format = '';
      this.htmlTags = false;
      this.textAlign = 'Left';
      this.verticalAlign = 'Top';
      this.lineHeight = 0;
      this.nullValue = '';
      this.text = '';
      this.wordWrap = true;
      this.border = {
        top: false,
        right: false,
        bottom: false,
        left: false,
        color: '#000',
        width: 1
      };
      this.font = {
        name: 'Arial',
        size: 10,
        bold: false,
        italic: false
      };
    }

    TextObject.prototype.load = function(obj) {
      TextObject.__super__.load.call(this, obj);
      return this.text = obj.text;
    };

    TextObject.prototype._build = function(page) {
      var obj;
      obj = TextObject.__super__._build.call(this, page);
      if (this.allowExpressions && this.text) {
        if (this._cachedData === void 0) {
          this._cachedData = page.document.engine.compileTemplate(this.text, this);
        }
        obj.content = this._cachedData(page.document.engine.scope);
      } else {
        obj.content = this.text;
      }
      obj.style = {
        'vertical-align': this.verticalAlign.toLowerCase(),
        'text-align': this.textAlign.toLowerCase(),
        'font-family': this.font.name,
        'font-size': this.font.size + 'pt'
      };
      if (this.lineHeight) {
        obj.style['line-height'] = this.lineHeight.toString() + 'px';
      }
      if (this.border.top) {
        obj.style['border-top'] = this.border.width.toString() + 'px solid ' + this.border.color + ';';
      }
      if (this.border.right) {
        obj.style['border-right'] = this.border.width.toString() + 'px solid ' + this.border.color + ';';
      }
      if (this.border.bottom) {
        obj.style['border-bottom'] = this.border.width.toString() + 'px solid ' + this.border.color + ';';
      }
      if (this.border.left) {
        obj.style['border-left'] = this.border.width.toString() + 'px solid ' + this.border.color + ';';
      }
      return obj;
    };

    TextObject.prototype.toHtml = function(obj) {
      var k, ref, s, style, v;
      s = '<div style="';
      style = 'position:absolute;overflow:hidden;display:inline;';
      style += 'left:' + obj.left.toString() + 'px;';
      style += 'top:' + obj.top.toString() + 'px;';
      if (obj.width) {
        style += 'max-width:' + obj.width.toString() + 'px;';
      }
      if (obj.height) {
        style += 'max-height:' + obj.height.toString() + 'px;';
      }
      if (obj.style) {
        ref = obj.style;
        for (k in ref) {
          v = ref[k];
          style += k + ':' + v.toString() + ';';
        }
      }
      s += style + '">' + obj.content + '</div>';
      return s;
    };

    return TextObject;

  })(base.BaseView);

  Runtime.registerComponent(TextObject);

}).call(this);

//# sourceMappingURL=text.js.map
