// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var AVG, COUNT, MAX, MIN, Runtime, SUM, Total,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Runtime = require('./runtime');

  SUM = 'SUM';

  COUNT = 'COUNT';

  MAX = 'MAX';

  MIN = 'MIN';

  AVG = 'AVG';

  Total = (function() {
    Total.getClassName = function() {
      return 'Total';
    };

    function Total(report) {
      this.report = report;
      this.band = bind(this.band, this);
      this.expression = null;
      this.band = null;
      this.func = SUM;
      this.name = null;
    }

    Total.prototype.band = function(band) {
      return band;
    };

    Total.prototype.compute = function(band, page) {
      var curVal, engine, v;
      engine = page.document.engine;
      v = engine.scope.$eval(this.expression) || 0;
      curVal = engine.totals[this.name];
      if (this.func === COUNT) {
        if (curVal == null) {
          curVal = 0;
        }
        curVal += 1;
      } else if (this.func === SUM) {
        if (curVal == null) {
          curVal = v;
        } else {
          curVal += v;
        }
      } else if (this.func === AVG) {
        if (curVal === null) {
          curVal = v;
        } else {
          curVal = (this.currentValue + v) / 2;
        }
      } else if (this.func === MIN) {
        if (curVal === null) {
          curVal = v;
        } else {
          curVal = Math.min(this.currentValue, v);
        }
      } else if (this.func === MAX) {
        if (curVal === null) {
          curVal = v;
        } else {
          curVal = Math.max(this.currentValue, v);
        }
      }
      engine.totals[this.name] = curVal;
      engine.scope[this.name] = curVal;
      return curVal;
    };

    Total.prototype.load = function(obj) {
      this.func = obj.func;
      this.name = obj.name;
      this.expression = obj.expression;
      return this.band = this.report.findObject(obj.band);
    };

    Total.prototype.reset = function(band, page) {
      return page.document.engine.totals[this.name] = null;
    };

    return Total;

  })();

  Runtime.registerComponent(Total);

}).call(this);

//# sourceMappingURL=total.js.map
